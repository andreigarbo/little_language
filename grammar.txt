Z ::= STATEMENTS
STATEMENTS ::= STATEMENT (';' STATEMENTS) *
STATEMENT ::= E_AS | E_IF | E_WHILE | E_DO_WHILE | E_FOR | FUNCTION_DECLARATION | VARIABLE_DECLARATION | VARIABLE_ASSIGNMENT

VARIABLE_TYPE ::= 'int' | 'float' | 'char' | 'string' | 'array' | 'file'
VARIABLE_NAME ::= (a-zA-Z_)+
OPERATOR_E_AS ::= '+' | '-' 
OPERATOR_E_MDR ::= '%' | '/' | '*'
EXPRESSION_MEMBER ::= VARIABLE_NAME | E_AS
VARIABLE_DECLARATION ::= VARIABLE_TYPE VARIABLE_NAME ( '(' VARIABLE_TYPE ')' )? ( '=' E_AS )?
VARIABLE_ASSIGNMENT ::= VARIABLE_NAME '=' VARIABLE_NAME | E_AS
CONDITION ::= '!' ? EXPRESSION_MEMBER (('==' | '!=') EXPRESSION_MEMBER)?
FUNCTION_DECLARATION ::= (VARIABLE_TYPE | 'void' ) VARIABLE_NAME '(' VARIABLE_TYPE VARIABLE_NAME ( ',' VARIABLE_TYPE VARIABLE_NAME)* ')' '{' STATEMENTS return EXPRESSION_MEMBER ';' '}'

E_IF ::= if '(' CONDITION ')' '{' STATEMENTS '}' (else '{' STATEMENTS '}' ) ?
E_WHILE ::= while '(' CONDITION ')' '{' STATEMENTS '}'
E_DO_WHILE ::= do '{' CONDITION '}' WHILE '{' STATEMENT '}'
E_FOR ::= E_FOR_TO | E_FOR_IN 
E_FOR_TO ::= for '(' EXPRESSION_MEMBER to EXPRESSION_MEMBER ( ',' iterate = (0-9)+)? ')' '{' STATEMENTS '}'
E_FOR_IN ::= for '(' VARIABLE_NAME in VARIABLE_NAME ')' '{' STATEMENTS '}'

E_AS ::= E_MDR ( OPERATOR_E_AS E_MDR)*
E_MDR ::= T ( OPERATOR_E_MDR T)*
T ::= i | E_AS | VARIABLE_NAME